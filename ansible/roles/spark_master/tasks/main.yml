---

- name: Start Spark master
  service: name=spark-master state=started enabled=yes

- name: Start Spark history server
  service: name=spark-history-server state=started enabled=yes

- name: Install Hail and Jupyter in venv
  pip:
          state: present
          name: 
            - "hail=={{ hail_version }}"
            - jupyterlab
          virtualenv: "{{ venv_dir }}"
  become: yes
  become_user: "{{ spark_user }}"

- name: Create Jupyter directories
  file:
          state: directory
          path: "{{ dir }}"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"
  loop:
          - "{{ home }}/.jupyter"
          - "{{ home }}/jupyter"
  loop_control:
          loop_var: dir

- name: Symlink Jupyter directory in data directory
  file:
          state: link
          src: "{{ home }}/jupyter"
          dest: "{{ home }}/data/jupyter"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"

- name: Generate Jupyter password
  shell: "{{ venv_dir }}/bin/python -c \"from notebook.auth import passwd ; print(passwd('{{ password }}'))\""
  register: jupyter_notebookapp_password
  changed_when: false

- name: Create Jupyter config file
  become: yes
  template:
          src: jupyter_notebook_config.py.j2
          dest: "{{ home }}/.jupyter/jupyter_notebook_config.py"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"

- name: Create Jupyter Lab service
  template:
          src: jupyter-lab.service.j2
          dest: /etc/systemd/system/jupyter-lab.service

- name: Start Jupyter Lab
  service: name=jupyter-lab state=started enabled=yes

- name: Configure password authentication for nginx
  become: yes
  htpasswd:
          path: /etc/nginx/passwdfile
          name: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ password }}"
          owner: root
          group: root

- name: Create nginx conf file
  become: yes
  template:
          src: nginx.conf.j2
          dest: /etc/nginx/conf.d/nginx.conf
          owner: root
          group: root

- name: Restart nginx
  service: name=nginx state=restarted enabled=yes

- name: Install Netdata
  shell: "cd {{ netdata_dir }} && ./netdata-installer.sh --dont-wait"
