#!/bin/bash

OSDP=$(readlink -f "$0")
OSDP_HOME=$(dirname "$OSDP")

export TF_VAR_os_user_name=$OS_USERNAME
export TF_VAR_os_tenant_name=$OS_PROJECT_NAME
export TF_VAR_os_password=$OS_PASSWORD
export TF_VAR_os_auth_url=$OS_AUTH_URL
export TF_VAR_os_region_name=$OS_REGION_NAME
export TF_VAR_os_interface=$OS_INTERFACE

export TF_VAR_cluster_name=$2
if [[ $3 =~ ^[0-9]+$ ]] ; then
	export TF_VAR_slaves=$(($3))
fi
if [[ $4 == "None" ]] ; then
	echo "Default flavor chosen"
else
	export TF_VAR_flavor_name=$4
fi
if [[ -f $5 ]] ; then
	export TF_VAR_identity_file=$(< $5)
elif [[ $5 == "None" ]] ; then
	echo $5
fi
export TF_VAR_network_name=$6
export TF_VAR_image_name=$7

ansible() {
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -i ${OSDP_HOME}/terraform/terraform.tfstate.d/${TF_VAR_cluster_name}/hosts_$1 ${OSDP_HOME}/ansible/main.yml -e 'ansible_python_interpreter=/usr/bin/python3' --limit spark_$1 > ${OSDP_HOME}/terraform/terraform.tfstate.d/${TF_VAR_cluster_name}/ansible-$1.log 2>&1
}

case $1 in
	init)
		cd ${OSDP_HOME}/terraform && terraform init -input=false
		;;
	apply)
		cd ${OSDP_HOME}/terraform
	       	terraform workspace \select $2 || terraform workspace new $2
	        terraform plan -out="terraform.tfstate.d/$2/plan" -input=false
		terraform apply -input=false "terraform.tfstate.d/$2/plan"
		terraform output -json > outputs.json
		ansible "master" & 
		exit 0
		;;
	destroy)
		cd ${OSDP_HOME}/terraform
	        if ! terraform workspace \select $2 ; then
			echo "cluster not found"
		else
			terraform workspace \select $2 && \
			terraform destroy && \
			terraform workspace \select default && \
			terraform workspace delete $2
		fi
		exit 0
		;;
	*)
		exit 0
		;;
esac
